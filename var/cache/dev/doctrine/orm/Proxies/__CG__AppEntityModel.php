<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Model extends \App\Entity\Model implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'make', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'engines', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'yearStart', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'yearFinish', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'transmissions', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'bodyType', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'subModels', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'icon', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'iconFile'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'make', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'engines', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'yearStart', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'yearFinish', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'transmissions', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'bodyType', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'subModels', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'icon', '' . "\0" . 'App\\Entity\\Model' . "\0" . 'iconFile'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Model $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getMake(): ?\App\Entity\Make
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMake', []);

        return parent::getMake();
    }

    /**
     * {@inheritDoc}
     */
    public function setMake(?\App\Entity\Make $make): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMake', [$make]);

        return parent::setMake($make);
    }

    /**
     * {@inheritDoc}
     */
    public function getEngines(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEngines', []);

        return parent::getEngines();
    }

    /**
     * {@inheritDoc}
     */
    public function addEngine(\App\Entity\Engine $engine): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEngine', [$engine]);

        return parent::addEngine($engine);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEngine(\App\Entity\Engine $engine): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEngine', [$engine]);

        return parent::removeEngine($engine);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getYearStart(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYearStart', []);

        return parent::getYearStart();
    }

    /**
     * {@inheritDoc}
     */
    public function setYearStart(int $yearStart): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYearStart', [$yearStart]);

        return parent::setYearStart($yearStart);
    }

    /**
     * {@inheritDoc}
     */
    public function getYearFinish(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYearFinish', []);

        return parent::getYearFinish();
    }

    /**
     * {@inheritDoc}
     */
    public function setYearFinish(?int $yearFinish): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYearFinish', [$yearFinish]);

        return parent::setYearFinish($yearFinish);
    }

    /**
     * {@inheritDoc}
     */
    public function getTransmissions(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTransmissions', []);

        return parent::getTransmissions();
    }

    /**
     * {@inheritDoc}
     */
    public function addTransmission(\App\Entity\Transmission $transmission): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTransmission', [$transmission]);

        return parent::addTransmission($transmission);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTransmission(\App\Entity\Transmission $transmission): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTransmission', [$transmission]);

        return parent::removeTransmission($transmission);
    }

    /**
     * {@inheritDoc}
     */
    public function getBodyType(): ?array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBodyType', []);

        return parent::getBodyType();
    }

    /**
     * {@inheritDoc}
     */
    public function setBodyType(?array $bodyType): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBodyType', [$bodyType]);

        return parent::setBodyType($bodyType);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubModels(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubModels', []);

        return parent::getSubModels();
    }

    /**
     * {@inheritDoc}
     */
    public function addSubModel(\App\Entity\SubModel $subModel): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSubModel', [$subModel]);

        return parent::addSubModel($subModel);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSubModel(\App\Entity\SubModel $subModel): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSubModel', [$subModel]);

        return parent::removeSubModel($subModel);
    }

    /**
     * {@inheritDoc}
     */
    public function getIcon(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIcon', []);

        return parent::getIcon();
    }

    /**
     * {@inheritDoc}
     */
    public function setIcon(?string $icon): \App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIcon', [$icon]);

        return parent::setIcon($icon);
    }

    /**
     * {@inheritDoc}
     */
    public function getIconFile(): ?\Symfony\Component\HttpFoundation\File\File
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIconFile', []);

        return parent::getIconFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setIconFile(\Symfony\Component\HttpFoundation\File\File $iconFile = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIconFile', [$iconFile]);

        return parent::setIconFile($iconFile);
    }

}
