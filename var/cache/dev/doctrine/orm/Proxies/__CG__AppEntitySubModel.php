<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class SubModel extends \App\Entity\SubModel implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'id', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'bodyPlatform', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'model', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'bodyType', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'images', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'rims', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'engines', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'faults', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'yearStart', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'yearFinish', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'tank', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'length', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'width', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'details', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'parts'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'id', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'bodyPlatform', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'model', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'bodyType', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'images', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'rims', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'engines', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'faults', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'yearStart', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'yearFinish', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'tank', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'length', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'width', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'details', '' . "\0" . 'App\\Entity\\SubModel' . "\0" . 'parts'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (SubModel $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getBodyPlatform(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBodyPlatform', []);

        return parent::getBodyPlatform();
    }

    /**
     * {@inheritDoc}
     */
    public function setBodyPlatform(string $bodyPlatform): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBodyPlatform', [$bodyPlatform]);

        return parent::setBodyPlatform($bodyPlatform);
    }

    /**
     * {@inheritDoc}
     */
    public function getModel(): ?\App\Entity\Model
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModel', []);

        return parent::getModel();
    }

    /**
     * {@inheritDoc}
     */
    public function setModel(?\App\Entity\Model $model): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModel', [$model]);

        return parent::setModel($model);
    }

    /**
     * {@inheritDoc}
     */
    public function getBodyType(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBodyType', []);

        return parent::getBodyType();
    }

    /**
     * {@inheritDoc}
     */
    public function setBodyType(string $bodyType): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBodyType', [$bodyType]);

        return parent::setBodyType($bodyType);
    }

    /**
     * {@inheritDoc}
     */
    public function getImages(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImages', []);

        return parent::getImages();
    }

    /**
     * {@inheritDoc}
     */
    public function addImage(\App\Entity\Image $image): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addImage', [$image]);

        return parent::addImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function removeImage(\App\Entity\Image $image): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeImage', [$image]);

        return parent::removeImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getRims(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRims', []);

        return parent::getRims();
    }

    /**
     * {@inheritDoc}
     */
    public function addRim(\App\Entity\Rim $rim): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRim', [$rim]);

        return parent::addRim($rim);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRim(\App\Entity\Rim $rim): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRim', [$rim]);

        return parent::removeRim($rim);
    }

    /**
     * {@inheritDoc}
     */
    public function getEngines(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEngines', []);

        return parent::getEngines();
    }

    /**
     * {@inheritDoc}
     */
    public function addEngine(\App\Entity\Engine $engine): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEngine', [$engine]);

        return parent::addEngine($engine);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEngine(\App\Entity\Engine $engine): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEngine', [$engine]);

        return parent::removeEngine($engine);
    }

    /**
     * {@inheritDoc}
     */
    public function getFaults(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFaults', []);

        return parent::getFaults();
    }

    /**
     * {@inheritDoc}
     */
    public function addFault(\App\Entity\Fault $fault): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFault', [$fault]);

        return parent::addFault($fault);
    }

    /**
     * {@inheritDoc}
     */
    public function removeFault(\App\Entity\Fault $fault): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFault', [$fault]);

        return parent::removeFault($fault);
    }

    /**
     * {@inheritDoc}
     */
    public function getYearStart(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYearStart', []);

        return parent::getYearStart();
    }

    /**
     * {@inheritDoc}
     */
    public function setYearStart(int $yearStart): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYearStart', [$yearStart]);

        return parent::setYearStart($yearStart);
    }

    /**
     * {@inheritDoc}
     */
    public function getYearFinish(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYearFinish', []);

        return parent::getYearFinish();
    }

    /**
     * {@inheritDoc}
     */
    public function setYearFinish(?int $yearFinish): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYearFinish', [$yearFinish]);

        return parent::setYearFinish($yearFinish);
    }

    /**
     * {@inheritDoc}
     */
    public function getTank(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTank', []);

        return parent::getTank();
    }

    /**
     * {@inheritDoc}
     */
    public function setTank(int $tank): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTank', [$tank]);

        return parent::setTank($tank);
    }

    /**
     * {@inheritDoc}
     */
    public function getLength(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLength', []);

        return parent::getLength();
    }

    /**
     * {@inheritDoc}
     */
    public function setLength(float $length): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLength', [$length]);

        return parent::setLength($length);
    }

    /**
     * {@inheritDoc}
     */
    public function getWidth(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidth', []);

        return parent::getWidth();
    }

    /**
     * {@inheritDoc}
     */
    public function setWidth(float $width): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWidth', [$width]);

        return parent::setWidth($width);
    }

    /**
     * {@inheritDoc}
     */
    public function getDetails(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDetails', []);

        return parent::getDetails();
    }

    /**
     * {@inheritDoc}
     */
    public function addDetail(\App\Entity\CarDetails $detail): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDetail', [$detail]);

        return parent::addDetail($detail);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDetail(\App\Entity\CarDetails $detail): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDetail', [$detail]);

        return parent::removeDetail($detail);
    }

    /**
     * {@inheritDoc}
     */
    public function getParts(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParts', []);

        return parent::getParts();
    }

    /**
     * {@inheritDoc}
     */
    public function addPart(\App\Entity\Part $part): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPart', [$part]);

        return parent::addPart($part);
    }

    /**
     * {@inheritDoc}
     */
    public function removePart(\App\Entity\Part $part): \App\Entity\SubModel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePart', [$part]);

        return parent::removePart($part);
    }

}
